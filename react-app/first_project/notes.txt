Why React?

-Reusability
-Simplification
-Modular Structure (Components)

- Virtual DOM -> login/not login 
- Declarative Programming 


React vs Other Frameworks:

- React vs Angular -> Angular full framework but react is a library
- React vs Vue: Vue has smaller ecosystem
-React vs Vanilla JS - Structure and maintainability is better 

Development Enviornment 


-Node.JS


node_modules -> helper files 
public -> files accessible by internet from our project 
src-> endpoint directory of the project


why create-react-app was depricated?



JSX  -> Javascript XML

it helps you write html like code in javascript files 
it makes it easier to write and understand react Components



KEYS

attributes 

Reusability 


component -> 
const todos = [
    {
        id:1, text:"Learn React"
    },{
        id:2, text:"Buy a ferrari"
    }
]

input -> submit -> todos push 


todos.map(
    'HTML'
)

const todoItems = todos.map(todo =>
  <li key={todo.id}>{todo.text}</li>
);


Learn React
Buy ferrari
Go to NYC 
go to dubai 


Keys in react are special attributes that are used touniquely identify elements in a list,
it helps in efficiently tracking the changes, removal and updates in the list and optimises the rendering process

How to use -> 1. list 
2. unique 


map-> index -> using array indexes is not recommended because if the list changes order, have items added, or removed, or changes, indexes will cause react to mis identify items 

Best practices:

- use a stable and unique values 
- key should not be same within siblings
- NEVER GENERATE A KEY ON THE FLY 
- Keys are used by React internally and ARE NOT PASSED TO COMPONENTS AS PROPS 


Whya are keys important ?

- Performance Optimization 



PROPS
short for properties 

props are used for passing data from parent components to child components in react
these enable us to pass dynamic information into different components and create reusable UI elements



userProfile


if the user is online -> name should be displayed in green color 
if the user is offline -> red or grey 


const user = {
    name:"Accio",
    email:"accio@accio.com",
    status:"Online" or "Offline"
}


useState Hook 

useState is a fundamental React hook that allows you to add a STATE to functional components. 


the problems with static websites

- any section or code that we have written will be executed
- not dynamic
- inefficient 

useState -> state 

integrity 

isLoggedIn - recommendation, history, analytics, 

ROLE BASED AUTHENTICATION 


Lifting State Up -> in this practice we move the state from a child component to a higher level in the component tree to make it accessible to mulitple components that need to share and synchronize that state

When to lift state up ?

-> when multiple components are hooked to the same state 
-> when you need to coordinate between different components 
-> When your UI depends on any state 

const parent()=>{
    const state 

    <a example={state} />
    <b />
    <c />
}


Conditional Rendering -> when display of the UI depends on a certain state



3 steps to lift a state up 

1. remove the state from child components 
2. pass hardcoded data from the common parent 
3. add the stte to the common parent and pass it down with props / event hndlers 


Lazy Initialisation

LAzy Initialisation is a performance optimisation technique where we initialise state with a function instead of a direct value.

this is useful when the initial state requires heavy computer 


const [state, setState] = useState(()=>{
    const computedValue= Math.radnom()*10-1
    return computedValue 
})


Benefits 

-> this function is only called during the initial render 
-> react ignores the initial value on susequent re=renders
-> prevemts unecessary computation on every render


React state updates are asynchronous they dont take effect until the next render. 

Solution:

1. functional updates -> 3rd party fetch -> update the state 
2. useEffect hook is used for side Effects -> it will handle the actions that depend on updated state 




sidebar, view component 


Conditional Rendering -> meaning that we need to show a specific UI element based on a certain condition 


create a React component that includes a sidebar with navigation items and a main screen that renders different content based on the selected sidebar item using conditional rendering and useState.



